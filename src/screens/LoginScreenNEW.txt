import { StackScreenProps } from "@react-navigation/stack";
import React, { useState } from "react";
import { StyleSheet, Text, TextInput, View, TouchableOpacity, Alert } from "react-native";

const API_URL = "http://192.168.1.11:5058/api/login"; // <<< Substitua pela URL real da sua API

type RootStackParamList = {
  Home: undefined;
  Login: undefined;
  Dashboard: { nome: string };
};

type LoginScreenProps = StackScreenProps<RootStackParamList, 'Login'>;

const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {
  const [nrCarteira, setNrCarteira] = useState('');
  const [senha, setSenha] = useState('');
  const [loading, setLoading] = useState(false);

  const handleLogin = async () => {
    if (!nrCarteira || !senha) {
      Alert.alert('Erro', 'Por favor, preencha todos os campos.');
      return;
    }
    
    setLoading(true);

    try {
      console.log('Tentando conectar em:', API_URL);
      console.log('Dados enviados:', JSON.stringify({ nrCarteira, senha }));

      const response = await fetch(API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          nrCarteira,
          senha,
        }),
      });

      const data = await response.json();
      console.log('Status:', response.status);
      console.log('Resposta:', data);
      
      setLoading(false);
      
      if (response.ok) {
        navigation.navigate('Dashboard', { nome: data.nome });
      } else {
        Alert.alert('Erro', data.mensagem || 'Falha ao fazer login.');
      }
    } catch (error) {
      setLoading(false);
      console.error('Erro detalhado:', error);
      Alert.alert('Erro', 'Não foi possível conectar ao servidor.');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>OdontoFast.</Text>
      <TextInput
        style={styles.input}
        placeholder="Carteirinha do Convênio"
        placeholderTextColor="#bbb"
        value={nrCarteira}
        onChangeText={setNrCarteira}
      />
      <TextInput
        style={styles.input}
        placeholder="Senha"
        placeholderTextColor="#bbb"
        secureTextEntry
        value={senha}
        onChangeText={setSenha}
      />
      <TouchableOpacity style={styles.button} onPress={handleLogin} disabled={loading}>
        <Text style={styles.buttonText}>{loading ? "Carregando..." : "Login"}</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f0f0f0',
  },
  header: {
    fontFamily: 'Nunito_700Bold',
    fontSize: 36,
    color: '#45B3CB',
    textAlign: 'center',
    marginBottom: 10,
  },
  input: {
    width: 315,
    height: 52,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 10,
    paddingLeft: 15,
    marginBottom: 20,
    fontFamily: 'Nunito_400Regular',
    fontSize: 16,
  },
  button: {
    backgroundColor: '#45B3CB',
    width: 315,
    height: 52,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10,
  },
  buttonText: {
    fontFamily: 'Nunito_700Bold',
    fontSize: 18,
    color: '#fff',
  },
});

export default LoginScreen;